Why is a stack the right choice for undo/redo?
Why is a queue better suited for the help desk?
How do your implementations differ from Pythonâ€™s built-in lists?

A stack is the right choice for undo/redo because it is a 
LIFO structure also known as last in first out. This is 
important for reversal of actions and going back through 
recent step. For this reason, this is the ideal data structure 
to keep track of undo and redo actions. A queue is better 
suited for the help desk because it is a FIFO structure also 
known as first in first out. These are utilized for operations 
that need to handle tasks in the order they arrived and to ensure
fairness amongst the queue, if I am in line to check out and I am 
the next one up, someone cutting to the front of the line that 
has been standing there for a shorter duration would not equate 
to fairness. These implementations differs from Python's built-in 
lists because it is much easier manipulated and keeps the items 
within the stack or queue in memory in a different capacity 
compared to a built-in list. Values are easy to view without 
needing to revisit its index which is important for more complex 
tasks like and undo redo tracking system and a help desk system. 
The data structure is important in managing how the user interacts 
with the system. If a built-in list were used in either of these 
cases it would complicate the process for the user and the overall 
programmers development process.